package com.example.nissim.googlemapsnissim;

import android.graphics.Color;
import android.support.v4.app.FragmentActivity;
import android.os.Bundle;
import android.widget.Toast;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;

import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.Polygon;
import com.google.android.gms.maps.model.PolylineOptions;

import com.google.maps.android.PolyUtil;
import com.google.maps.android.data.kml.KmlContainer;
import com.google.maps.android.data.kml.KmlLayer;
import com.google.maps.android.data.kml.KmlPlacemark;
import com.google.maps.android.data.kml.KmlPolygon;

import org.xmlpull.v1.XmlPullParserException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static android.support.v4.math.MathUtils.clamp;


public class MapsActivity extends FragmentActivity implements OnMapReadyCallback {
    private List<KmlPolygon> polygonInLayer;
    private List<KmlPolygon> polygonPointsList;
    private ArrayList<LatLng> coordinatesList;
    private GoogleMap mMap;
    private KmlPolygon finalKmlPolygon;
    private LatLng nearestPoint;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_maps);
        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
    }

    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;

        //This code is generated by android studio and i changed it in order to open the map at this point
        LatLng telAviv = new LatLng(32.062143, 34.790655);
        mMap.addMarker(new MarkerOptions().position(telAviv).title("Marker in Tel Aviv"));
        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(telAviv, 15.2f));

        //Load kml file to map
        setKmlFile();

        //Check if the user click in polygon
        mMap.setOnPolygonClickListener(new GoogleMap.OnPolygonClickListener() {
            @Override
            public void onPolygonClick(final Polygon polygon) {
                Toast.makeText(MapsActivity.this, "You clicked inside the polygon", Toast.LENGTH_SHORT).show();
            }
        });

        //Check if the user click out of polygon
        mMap.setOnMapClickListener(new GoogleMap.OnMapClickListener() {
            @Override
            public void onMapClick(LatLng clickedLocation) {
                Toast.makeText(MapsActivity.this, "You clicked outside the polygon", Toast.LENGTH_SHORT).show();

                //checkClosestDistance
                nearestPoint = findNearestPoint(clickedLocation,coordinatesList);

                //draw the polyline
                drawPath(clickedLocation);
            }
        });
    }


    // This is not my code
    private LatLng findNearestPoint(LatLng clickedLocation, List<LatLng> target) {
        double distance = 0;
        LatLng minimumDistancePoint = clickedLocation;

        if (clickedLocation == null || target == null) {
            return minimumDistancePoint;
        }

        for (int i = 0; i < target.size(); i++) {
            LatLng point = target.get(i);

            int segmentPoint = i + 1;
            if (segmentPoint >= target.size()) {
                segmentPoint = 0;
            }

            double currentDistance = PolyUtil.distanceToLine(clickedLocation, point, target.get(segmentPoint));
            if (distance == 0 || currentDistance < distance) {
                distance = currentDistance;
                minimumDistancePoint = findNearestPoint(clickedLocation, point, target.get(segmentPoint));
            }
        }

        return minimumDistancePoint;
    }

    // This is not my code
    private LatLng findNearestPoint(final LatLng p, final LatLng start, final LatLng end) {
        if (start.equals(end)) {
            return start;
        }

        final double s0lat = Math.toRadians(p.latitude);
        final double s0lng = Math.toRadians(p.longitude);
        final double s1lat = Math.toRadians(start.latitude);
        final double s1lng = Math.toRadians(start.longitude);
        final double s2lat = Math.toRadians(end.latitude);
        final double s2lng = Math.toRadians(end.longitude);

        double s2s1lat = s2lat - s1lat;
        double s2s1lng = s2lng - s1lng;
        final double u = ((s0lat - s1lat) * s2s1lat + (s0lng - s1lng) * s2s1lng)
                / (s2s1lat * s2s1lat + s2s1lng * s2s1lng);
        if (u <= 0) {
            return start;
        }
        if (u >= 1) {
            return end;
        }

        return new LatLng(start.latitude + (u * (end.latitude - start.latitude)),
                start.longitude + (u * (end.longitude - start.longitude)));

    }


    //Create the polyline and add it to map
    private void drawPath(LatLng clickedLocation){
        PolylineOptions options = new PolylineOptions().width(5).color(Color.BLUE).geodesic(true).add(nearestPoint).add(clickedLocation);
        mMap.addPolyline(options);
    }

    public GoogleMap getMap() {
        return mMap;
    }

    //Create a Kml layer from my local resource
    public void setKmlFile() {
        KmlLayer layer = null;
        try {
            layer = new KmlLayer(getMap(), R.raw.allowed_area, getApplicationContext());
        } catch (XmlPullParserException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            layer.addLayerToMap();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (XmlPullParserException e) {
            e.printStackTrace();
        }

        //Get polygon coordinates
        polygonInLayer = getPolygons(layer.getContainers());
        finalKmlPolygon = polygonInLayer.get(0);

        //Add the coordinates from finalKmlPolygon to array list named coordinatesList
        coordinatesList = new ArrayList<>(finalKmlPolygon.getOuterBoundaryCoordinates());
    }


    //Get Polygon points from kml file
    private List<KmlPolygon> getPolygons(Iterable<KmlContainer> containers) {
        List<KmlPolygon> polygons = new ArrayList<>();

        if (containers == null) {
            return polygons;
        }

        for (KmlContainer container : containers) {
            polygons.addAll(getPolygons(container));
        }

        return polygons;
    }

    private List<KmlPolygon> getPolygons(KmlContainer container) {
        polygonPointsList = new ArrayList<>();

        if (container == null) {
            return polygonPointsList;
        }

        Iterable<KmlPlacemark> placemarks = container.getPlacemarks();
        if (placemarks != null) {
            for (KmlPlacemark placemark : placemarks) {
                if (placemark.getGeometry() instanceof KmlPolygon) {
                    polygonPointsList.add((KmlPolygon) ((KmlPolygon) placemark.getGeometry()));
                }
            }
        }

        if (container.hasContainers()) {
            polygonPointsList.addAll(getPolygons(container.getContainers()));
        }

        return polygonPointsList;
    }
}